from typing import (
    List,
    Tuple,
    Optional,
)
from glob import glob
from polyphys.manage.organizer import (
    invalid_keyword,
    sort_filenames,
    database_path,
    whole,
    ensemble,
    ensemble_avg,
    children_stamps,
    parents_stamps
)

from polyphys.analyze.distributions import distributions_generator
from polyphys.analyze.correlations import acf_generator


def time_series(
    observations: List[str],
    save_to: Tuple[str, str, str],
    tseries: List[Tuple[str, str, str]],
    geometry: str = 'biaxial',
    nlags: int = 7000,
    alpha: float = 0.05
) -> None:
    """
    runs overs all 'segment' `observations` resulted from 'probing' a \
    `group` in a 'biaxial' geometry, merges time series vertically to \
    create 'whole' files, do different analyses on time series \
    including auto correlation function (AFC) analysis, and finally \
    writes the ensembles and ensembles averages of time series and its \
    associated analyses to file.

    Parameters
    ----------
    observations: list of str
        List of path to different observations generated by 'probed' \
        trajectory files.
    save_to : tuple of three str
        Absolute or relative path of the directories to which wholes, \
        ensembles, and ensemble-aveages are saved.
    tseries: list of tuple of str
        A list of tumple where each tumple has three members: the property \
        name, species, and group of a 'time-series' property.
    geometry : {'biaxial', 'slit', 'box'}, default 'biaxial'
        Shape of the simulation box.
    nlags: int, default 7000
        Maximum lag in the auto correlation function (AFC).
    alpha: float, default 0.05
        If a number is given, the confidence intervals for the given level \
        are returned. For instance if alpha=.05, 95 % confidence intervals \
        are returned where the standard deviation is computed according to \
        Bartlett”s formula.
    """
    invalid_keyword(geometry, ['biaxial', 'slit', 'box'])
    save_to_whole, save_to_ens, save_to_ens_avg = save_to
    for property_, species, group in tseries:
        segments = sort_filenames(
            observations,
            fmts=['-' + property_ + species + '.npy']
        )
        # 'whole' dataframes, each with a 'whole' as its column:
        wholes = whole(
            property_ + species,
            segments,
            geometry=geometry,
            group=group,
            relation='tseries',
            save_to=save_to_whole
        )
        ensembles = ensemble(
                property_ + species,
                wholes,
                geometry=geometry,
                group=group,
                save_to=save_to_ens
            )
        _ = ensemble_avg(
                property_ + species,
                ensembles,
                geometry='biaxial',
                group=group,
                save_to=save_to_ens_avg
            )
        acfs, lower_cls, upper_cls = acf_generator(
            property_ + species,
            ensembles,
            nlags,
            alpha,
            group=group,
            save_to=save_to_ens
        )
        _ = ensemble_avg(
                property_ + species + '-acf',
                acfs,
                geometry='biaxial',
                group=group,
                save_to=save_to_ens_avg
            )
        _ = ensemble_avg(
                property_ + species + '-acfLowerCl',
                lower_cls,
                geometry='biaxial',
                group=group,
                save_to=save_to_ens_avg
            )
        _ = ensemble_avg(
                property_ + species + '-acfUpperCl',
                upper_cls,
                geometry='biaxial',
                group=group,
                save_to=save_to_ens_avg
            )


def histograms(
    observations: List[str],
    save_to: Tuple[str, str, str],
    geometry: str = 'biaxial',
    rho_and_phi: Optional[List[Tuple[str, str, str]]] = None,
    no_rho_and_phi: Optional[List[Tuple[str, str, str]]] = None
) -> None:
    """
    runs overs all 'segment' `observations` resulted from 'probing' a \
    `group` in a 'biaxial' geometry, adds histograms horizontally to \
    create 'whole' files, do different analyses on histograms including \
    local number density and volume fraction analysis, and finally \
    writes the ensembles and ensembles averages of histograms and thier \
    associated analyses to file.

    Parameters
    ----------
    observations: list of str
        List of path to different observations generated by 'probed' \
        trajectory files.
    save_to : tuple of three str
        Absolute or relative path of the directories to which wholes, \
        ensembles, and ensemble-aveages are saved.
    geometry : {'biaxial', 'slit', 'box'}, default biaxial
        Shape of the simulation box.
    rho_and_phi: list of tuple of str, default None
        A list of tumple where each tumple has four members: the direction, \
        direction long name, species, and group of a 'histogram' property. \
        These histogram properties are then used to calculate the local \
        number density and volume fraction.
    no_rho_and_phi: list of tuple of str, default None
        A list of tumple where each tumple has three members: the direction, \
        species, and group of a 'histogram' property.
    """
    invalid_keyword(geometry, ['biaxial', 'slit', 'box'])
    save_to_whole, save_to_ens, save_to_ens_avg = save_to
    # Histograms:
    # Two types of histograms with and without rhos and phis:
    # rho: local number density
    # phi: locla volume fraction
    if rho_and_phi is not None:
        for direction, species, group in rho_and_phi:
            segments = sort_filenames(
                observations,
                fmts=['-' + direction + 'Hist' + species + '.npy']
            )
            edge_segments = sort_filenames(
                observations,
                fmts=['-' + direction + 'Edge' + species + '.npy']
            )
            # 'whole' dataframes, each with 'segments' as columns:
            wholes = whole(
                direction + 'Hist' + species,
                segments,
                geometry=geometry,
                group=group,
                relation='histogram',
                save_to=save_to_whole
            )
            edge_wholes = whole(
                direction + 'Edge' + species,
                edge_segments,
                geometry=geometry,
                group=group,
                relation='bin_edge',
                save_to=save_to_whole
            )
            # 'whole' dataframes, each with a 'whole' columns.
            rho_wholes, phi_wholes = distributions_generator(
                wholes,
                edge_wholes,
                group,
                species,
                geometry,
                direction,
                save_to=save_to_whole
            )
            ensembles = ensemble(
                direction + 'Hist' + species,
                wholes,
                geometry=geometry,
                group=group,
                edge_wholes=edge_wholes,
                save_to=save_to_ens
            )
            _ = ensemble_avg(
                direction + 'Hist' + species,
                ensembles,
                geometry='biaxial',
                group=group,
                save_to=save_to_ens_avg
            )
            ensembles = ensemble(
                direction + 'Rho' + species,
                rho_wholes,
                geometry=geometry,
                group=group,
                edge_wholes=edge_wholes,
                save_to=None
            )
            _ = ensemble_avg(
                direction + 'Rho' + species,
                ensembles,
                geometry='biaxial',
                group=group,
                save_to=save_to_ens_avg
            )
            ensembles = ensemble(
                direction + 'Phi' + species,
                phi_wholes,
                geometry=geometry,
                group=group,
                edge_wholes=edge_wholes,
                save_to=save_to_ens
            )
            _ = ensemble_avg(
                direction + 'Phi' + species,
                ensembles,
                geometry='biaxial',
                group=group,
                save_to=save_to_ens_avg
            )
        del rho_wholes, phi_wholes
    if no_rho_and_phi is not None:
        for species, direction, group in no_rho_and_phi:
            segments = sort_filenames(
                observations,
                fmts=['-' + direction + 'Hist' + species + '.npy']
            )
            edge_segments = sort_filenames(
                observations,
                fmts=['-' + direction + 'Edge' + species + '.npy']
            )
            # 'whole' dataframes, each with 'segments' as columns:
            wholes = whole(
                direction + 'Hist' + species,
                segments,
                geometry=geometry,
                group=group,
                relation='histogram',
                save_to=save_to_whole
            )
            edge_wholes = whole(
                direction + 'Edge' + species,
                segments,
                geometry=geometry,
                group=group,
                relation='bin_edge',
                save_to=save_to_whole
            )
            ensembles = ensemble(
                direction + 'Hist' + species,
                wholes,
                geometry=geometry,
                group=group,
                edge_wholes=edge_wholes,
                save_to=save_to_ens
            )
            _ = ensemble_avg(
                direction + 'Hist' + species,
                ensembles,
                geometry='biaxial',
                group=group,
                save_to=save_to_ens_avg
            )


def analyze_segments(
    input_database: str,
    geometry: str = 'biaxial',
    hierarchy: str = "/N*/N*"
) -> None:
    """
    reads in the 'probe' observations based on the `hierarchy` of directories \
    and files from the `input_database` path to the 'probe' phase of a \
    'space' and creates the 'analysis' phase at that parent directory of the \
    'probe' of that 'space', infers 'space' names from `input_database` path \
    and creates a 'space' directories at various stages in the 'analysis' \
    directory for both 'bug' and 'all' groups.

    Parameters
    ----------
    input_database: str
        Path to the input_database; a 'space' directory at a given 'phase'.
    geometry : {'biaxial', 'slit', 'box'}, default 'biaxial'
        Shape of the simulation box.
    hierarchy: str
        Hierarchy of the directories and files within the `input_database`.
    """
    # if not pathlib.Path(input_database).exists():
    #    raise ValueError(
    #        f"'{input_database}'"
    #        "path does not exist."
    #        )
    observations = glob(input_database + hierarchy)
    if observations == []:
        raise ValueError(
            "File not found in "
            f"'{input_database + hierarchy}'"
            )
    # 'bug' save_to paths:
    save_to_whole = database_path(
        input_database, 'analysis', stage='wholeSim', group='bug'
    )
    save_to_ens = database_path(
        input_database, 'analysis', stage='ens', group='bug'
    )
    save_to_ens_avg = database_path(
        input_database, 'analysis', stage='ensAvg', group='bug'
    )
    # stamps:
    stamp_files = sort_filenames(observations, fmts=['-stamps.csv'])
    segments_stamps = children_stamps(
        stamp_files,
        lineage='segment',
        save_to=save_to_whole
    )
    whole_stamps = parents_stamps(
        segments_stamps,
        geometry=geometry,
        lineage='segment',
        save_to=save_to_ens
    )
    _ = parents_stamps(
        whole_stamps,
        geometry=geometry,
        lineage='whole',
        save_to=save_to_ens_avg
    )
    # 'bug' time series and histograms:
    tseries_bug = [  # property_, species, group
                   ('fsdT', 'Mon', 'bug'),
                   ('gyrT', 'Mon', 'bug'),
                   ('rfloryT', 'Mon', 'bug')
                   ]
    time_series(
        observations,
        (save_to_whole, save_to_ens, save_to_ens_avg),
        tseries_bug,
        geometry=geometry
    )
    no_rho_and_phi_bug = [  # direction, species, group
                          ('rflory', 'Mon', 'bug')
                          ]
    histograms(
        observations,
        (save_to_whole, save_to_ens, save_to_ens_avg),
        geometry=geometry,
        no_rho_and_phi=no_rho_and_phi_bug
    )
    # 'all' save_to paths:
    save_to_whole = database_path(
        input_database, 'analysis', stage='wholeSim', group='all'
    )
    save_to_ens = database_path(
        input_database, 'analysis', stage='ens', group='all'
    )
    save_to_ens_avg = database_path(
        input_database, 'analysis', stage='ensAvg', group='all'
    )
    # 'all' histograms:
    rho_and_phi_all = [  # direction, direction long name, species, group
                   ('r', 'Crd', 'all'),
                   ('z', 'Crd', 'all'),
                   ('r', 'Mon', 'all'),
                   ('z', 'Mon', 'all'),
                   ]
    no_rho_and_phi_all = [  # direction, species, group
                      ('theta', 'Crd', 'all'),
                      ('theta', 'Mon', 'all'),
                      ('rflory', 'Mon', 'bug')
                      ]
    histograms(
        observations,
        (save_to_whole, save_to_ens, save_to_ens_avg),
        geometry=geometry,
        rho_and_phi=rho_and_phi_all,
        no_rho_and_phi=no_rho_and_phi_all
    )
